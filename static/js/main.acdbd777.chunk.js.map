{"version":3,"sources":["Trainer/Completion.js","Trainer/DrinkList.js","Trainer/DrinkVis.js","Trainer/LearningProgress.js","Trainer/Trainer.js","App.js","reportWebVitals.js","index.js"],"names":["Completion","props","useState","message","setMessage","useEffect","progress","Modal","open","onClose","window","location","reload","setProgress","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Box","sx","position","top","left","transform","width","bgcolor","border","boxShadow","p","DrinkList","drinksEls","drinks","map","drink","className","curTraining","id","onClick","onSelected","name","DrinkVis","modalopen","showModal","setShowModal","curInd","setCurInd","clicked","setClicked","circles","text","clickableArea","getClass","index","temp","length","entries","drinkarray","steps","positions","value","push","class","r","cx","x","cy","y","fill","stroke","strokeWidth","opacity","recipeindex","stepindex","setClickArray","src","imageurl","viewBox","LearningProgress","LinearProgress","variant","color","Trainer","setDrinks","setCurTraining","fetch","then","response","json","data","drinkSelected","foundDrink","find","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acdbd777.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Modal, Fade, Box } from \"@mui/material\";\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\n//we're evolving this into an introduction screen as well as a completion screen <3\r\n\r\n\r\nexport default function Completion(props) {\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  //mui docs donation <3\r\n  const style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid ##d5c4b4',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n  //end donation\r\n  useEffect(() => {\r\n    if (props.progress >= 150) {\r\n      setMessage(\"Congrats! You finished all your training!\")\r\n    }\r\n    else if (props.progress == 0) {\r\n      setMessage(\"Let's get started training! Click on each numbered step for each drink to learn how to make them.\")\r\n    }\r\n  }, [message, props.progress]);\r\n\r\n\r\n\r\n  //if last button was clicked, show completion modal\r\n  if (props.progress >= 150 || props.progress == 0) {\r\n    return <div><Modal open\r\n      onClose={() => {\r\n        //after they close the modal, refresh the whole page\r\n        if (props.progress > 0) {\r\n          window.location.reload();\r\n        }\r\n        else {\r\n          props.setProgress(props.progress + .1);\r\n        }\r\n      }}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n    >\r\n      <Fade in={true}>\r\n        <Box sx={style}>\r\n\r\n          <h3>{message}</h3>\r\n        </Box>\r\n      </Fade></Modal></div>;\r\n  }\r\n  else {\r\n    return <div></div>\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default function DrinkList(props) {\r\n\r\n  //map drinks to left side list of drinks\r\n  let drinksEls = props.drinks.map((drink) => (\r\n    <div\r\n      key={drink.id}\r\n      // set class name based on whether the drink is the currently selected drink\r\n      className={props.curTraining.id == drink.id ? \"active\" : \"inactive\"}\r\n      onClick={() => {\r\n        props.onSelected(drink.id);\r\n      }}\r\n    >\r\n      {drink.name}\r\n    </div>\r\n  ));\r\n\r\n  return <div>{drinksEls}</div>;\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Modal, Fade, Box } from \"@mui/material\";\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport {\r\n  CSSTransition,\r\n  TransitionGroup,\r\n} from 'react-transition-group';\r\nimport './styles.css';\r\n\r\nexport default function DrinkVis(props) {\r\n  const [showModal, setShowModal] = useState(props.modalopen);\r\n  const [curInd, setCurInd] = useState(0);\r\n  const [clicked, setClicked] = useState([]);\r\n  const circles = [];\r\n  const text = [];\r\n  const clickableArea = [];\r\n  //this section generously donated by mui docs <3\r\n  const style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid ##d5c4b4',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n  //end mui doc section\r\n\r\n  //get the new class when button clicked\r\nfunction getClass(index){\r\n  var cn = temp[props.curTraining.id][index] ? \"clicked\" : \"\";\r\n  return cn;\r\n}\r\n\r\n  if (props.drinks.length > 0) {\r\n    var temp = clicked;\r\n    if (temp.length == 0) {\r\n      for (const [drinkindex, drink] of props.drinks.entries()) {\r\n        var drinkarray = [];\r\n        for (const [stepindex, step] of drink.steps.entries()) {\r\n          drinkarray = [...drinkarray, false];\r\n        }\r\n        temp = [...temp, drinkarray];\r\n      }\r\n      setClicked(temp);\r\n    }\r\n\r\n    //loop through positions for cur drink and map circles to those positions on the screen\r\n    for (const [index, value] of props.curTraining.positions.entries()) {\r\n      circles.push(<circle class= {getClass(index)} r=\"10\" cx={value.x} cy={value.y} fill=\"#FFFFC9\" stroke=\"black\" strokeWidth=\"1\" />)\r\n      //add text on top of circles\r\n      text.push(<text class={getClass(index)} x={value.x - 5} y={value.y + 5} fill=\"#FFFFC9\" stroke=\"black\" strokeWidth=\"1\">{index + 1}</text>);\r\n      //add clear circle on top of circle and text to make text clickable as well\r\n      clickableArea.push(<circle  r=\"10\" cx={value.x} cy={value.y} opacity=\"0\" onClick={() => {\r\n        //if the circle has already been clicked, do nothing\r\n        if (temp[props.curTraining.id][index] == true) {\r\n\r\n        }\r\n        //otherwise, add to progress, set it to clicked, show the Modal that goes with it, use function to update array storing whether\r\n        //all have been clicked or not\r\n        else {\r\n\r\n          props.setProgress(props.progress + 3.45);\r\n          setCurInd(index);\r\n          setShowModal(true);\r\n          setClickArray(props.curTraining.id, index, clicked, setClicked);\r\n        }\r\n      }}/>)\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n      //show image, circles, and text that correlate to the current drink\r\n      <div>\r\n        <div className=\"img-overlay-wrap\">\r\n          <img src={props.curTraining.imageurl} />\r\n          <svg viewBox=\"0 0 200 200\">\r\n            {circles}\r\n            {text}\r\n            {clickableArea}\r\n          </svg>\r\n        </div>\r\n\r\n\r\n        {/* modal that shows steps based on clicks on circles*/}\r\n        <Modal\r\n          open={showModal}\r\n          onClose={() => {\r\n            setShowModal(false);\r\n            //if the last circle clicked was the last one the user needed to click,\r\n            //set progress much higher than acheivable through clicks to signal to other component that the user is finished\r\n            if (props.progress > 100) {\r\n              props.setProgress(props.progress + 50);\r\n            }\r\n          }}\r\n          closeAfterTransition\r\n          BackdropComponent={Backdrop}\r\n          BackdropProps={{\r\n            timeout: 500,\r\n          }}\r\n\r\n        >\r\n          <Fade in={showModal}>\r\n            <Box sx={style}>\r\n              <div>\r\n                <h3>Step {curInd + 1} : </h3>\r\n                <p>{props.curTraining.steps[curInd]}</p>\r\n              </div>\r\n            </Box>\r\n          </Fade>\r\n        </Modal>\r\n\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n  return (<div></div>);\r\n}\r\n\r\n//update double array ([][]) based on itself and updates from the user clicking on buttons\r\nfunction setClickArray(recipeindex, stepindex, clicked, setClicked) {\r\n  var temp = [...clicked];\r\n  temp[recipeindex][stepindex] = true;\r\n  setClicked(temp);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {LinearProgress} from \"@mui/material\";\r\n\r\nexport default function LearningProgress(props){\r\n    return (\r\n    //all this does is takes the progress from trainer and puts it in a pretty progress bar\r\n    //i did set it to be not the normal mui color tho\r\n    <div>\r\n        <LinearProgress variant=\"determinate\" value={props.progress} color=\"inherit\"/>\r\n    </div>)\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Completion from \"./Completion\";\r\nimport DrinkList from \"./DrinkList\";\r\nimport DrinkVis from \"./DrinkVis\";\r\nimport LearningProgress from \"./LearningProgress\";\r\nimport './styles.css';\r\nexport default function Trainer() {\r\n  //initialize all state variables\r\n  const [drinks, setDrinks] = useState([]);\r\n  const [modalopen, setModalOpen] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  //here so that react doesn't yell about the user not having selected something on load\r\n  const [curTraining, setCurTraining] = useState({\r\n    \"id\": 0,\r\n    \"name\": \"Mocha\",\r\n    \"ingredients\": [\r\n      \"milk\",\r\n      \"mocha sauce\",\r\n      \"espresso\"\r\n    ],\r\n    \"steps\": [\r\n      \"Brew an espresso into a mug, cup or glass.\",\r\n      \"Add two teaspoons of hot chocolate mix or cocoa powder and mix with the espresso.\",\r\n      \"Foam and texture the required quantity of milk, ensuring we have a good quality foam.\",\r\n      \"Add the milk to the cup containing the chocolate espresso and top with whipped cream.\"\r\n    ],\r\n\r\n    \"positions\": [{ \"x\": 35, \"y\": 15 }, { \"x\": 35, \"y\": 45 }, { \"x\": 35, \"y\": 75 }, { \"x\": 35, \"y\": 105 }],\r\n    \"imageurl\": \"./imagesforproject2/mocha.png\"\r\n\r\n  });\r\n\r\n  //get all data from JSON file\r\n  useEffect(() => {\r\n    fetch(\"data/drinks.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setDrinks(data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    //heading and now training display, list of drinks with selected drink highlighted\r\n    <div id=\"playfield\">\r\n      <div id=\"heading\">\r\n        Barista Trainer\r\n        <div id=\"sub\">\r\n          Now Learning: {curTraining.name}\r\n        </div>\r\n      </div>\r\n      <div id=\"stufftoflex\">\r\n        <DrinkList\r\n          drinks={drinks}\r\n          curTraining={curTraining}\r\n          onSelected={(id) => {\r\n            drinkSelected(id);\r\n\r\n          }}\r\n        />\r\n        {/* Drink Visualizations inclusing circles, images, and modal  */}\r\n        <DrinkVis\r\n          drinks={drinks}\r\n          curTraining={curTraining}\r\n          onSelected={(id) => {\r\n            drinkSelected(id);\r\n          }}\r\n          modalopen={modalopen}\r\n          setProgress={setProgress}\r\n          progress={progress}\r\n        />\r\n      </div>\r\n      {/* Progress bar at bottom of screen */}\r\n      <LearningProgress\r\n        progress={progress} />\r\n      {/* Screen that shows the user that they've clicked through all drink steps and refreshes screen\r\n         To test without actually doing that, change the value of progress to start at 100 and click a step */}\r\n      <Completion\r\n        progress={progress}\r\n        setProgress={setProgress} />\r\n\r\n    </div>\r\n  );\r\n\r\n  //function so generously donated by one of the labs we did in class\r\n  //finds the drink matching the button the user picked and sets it to be currently training\r\n  function drinkSelected(id) {\r\n    //find that drink\r\n    const foundDrink = drinks.find((drink) => drink.id == id);\r\n    //set it as currently learning\r\n    setCurTraining(foundDrink);\r\n\r\n\r\n  }\r\n}","\nimport Trainer from \"./Trainer/Trainer\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Trainer />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}